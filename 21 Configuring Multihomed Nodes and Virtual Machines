### 21 Configuring Multihomed Nodes and Virtual Machines
The NMSTate Operator can help us to configure the nodes in order to be ready 
for the requirements imposed but the "NetworkAttachementDefinition"
The MachineConfigOperator could help us to configure the nodes, but it's very
intrusive, since when it applies the changes to the nodes, it needs to reboot them. 
It talks to the machine config deamon present on each node, applies the configurations
and then reboot them. 

The NMState operator does not need to restart nodes.
It collects the current network state of nodes creating some resources, and transforms
the changes that we want do make in network configurations policies. 

Install the NMState operator --> create an NMState instance to deploy the NMState controller
on all the nodes. 

You must create the NMState instance in the project openshift-nmstate.

It will create different resources: 

1 - NodeNetworkState (NNS): a readOnly resource that describe the network configurations. 
    There will be one NNS per node. In the status there will be the network
    interfaces and the configurations.

2 - NodeNetworkConfigurationPolicy (NNCP): a resource that allows to change the node network
    configuration. It can manages different types of network interfaces like: Linux Bridge,
    bonding and Ethernet interfaces.
    NOTE: a Linux Bridge is a software feature integrated in the Linux Kernel. A Linux Bridge
          connects different physical or virtual interfaces forwarding the Ethernet frames 
	  based on MAC addresses. It's like a switch at data-link level. 
    NodeNetworkConfigurationPolicy (NNCP) is applied to all the nodes in the cluster or just
    to a subset of nodes, for example to compute nodes. These resources are not namespaced,
    so you have to be a cluster-admin in order to see them. 
3 - When you apply the NNCP the operator will create a "NodeNetworkConfigurationEnactment (NNCE),
    that is a report about the changes on the node. If the node cannot be configurated to state
    expressed in the NNCE than it will rollback to the previous configuration giving us the data
    in order to troubleshoot.

Configurare la vNIC di una VM in OpenShift Virtualization su un Linux bridge significa farla apparire alla rete fisica come un server tradizionale: ottiene direttamente un indirizzo IP e un MAC “reali” sulla stessa subnet o VLAN dei sistemi on-prem, evita gli overlay e le traduzioni di rete garantendo throughput wire-speed, consente senza filtri traffico broadcast/multicast e PXE, permette appliance e software legacy che dipendono dal livello 2 o da licenze legate a IP/MAC, si integra immediatamente con firewall, IDS e load-balancer già in produzione, e rende indolori i lift-and-shift da ambienti VMware/KVM, a patto di curare con attenzione il cablaggio delle VLAN sui nodi e le misure di sicurezza perché l’esposizione L2 è diretta.

 
Praticamente quando vogliamo che il pod comunichi direttamente con la rete dei nodi, dobbiamo creare un oggetto
chiamato Linux Bridge.

In questo caso dobbiamo creare anche una network interface net1 per il nostro virt-launcher pod. 

Ricordiamo che all'interno della vm abbiamo delle delle schede di rete virtuali: eth0, che si collega alla scheda eth0 del pod al fine di comunicare con la rete di default dei pod (masquerade) attraverso la SDN OVN-Kubernetes.
OVN-Kubernetes, come CNI plugin principale è collegata a Multus che fa la chain con altri network plugin 
"di attacco" secondary tipo "bridge CNI,macvlan, ipvlan, Calico etc" 
che nel caso di una connessione bridge è il plugin secondario di nome "Bridge CNI" 
(ricordiamo che un Linux bridge è una funzionalità software del kernel Linux 
che quindi ha bisogno di essere abilitata sui nodi del cluster).
"eth1" secondaria appunto che si collega alla "net1" (definita attraverso la NAD "NetworkAttachementDefinition") 
che consente attraverso Multus di collegarsi al OVS bridge (Open vSwitch, alternativa a Linux Bridge, 
più semplice rispetto a OVS bridge), il quale sarà collegato ad un "bond0" per unire il throughput
di due schede di rete fisiche.

OpenShift ammette un solo provider di rete predefinito per l’intero cluster; questo provider deve soddisfare il modello-pod di Kubernetes (tutti i pod si devono vedere fra nodi, IP univoci, ecc.).
Dalla 4.x in poi Red Hat supporta solo due provider “default”:

OVN-Kubernetes – soluzione SDN basata su OVS, oggi predefinita
OpenShift Documentation
OpenShift Documentation

OpenShift SDN – legacy, in dismissione
OpenShift Documentation
Microsoft Learn

I plugin “semplici” come bridge, macvlan, ovs-cni, sriov, ipvlan sono ammessi solo come reti aggiuntive tramite Multus
Red Hat Documentation
Red Hat Documentation
. Il Cluster Network Operator li marca infatti come additional networks
Red Hat Documentation
.


Ruolo di Bridge CNI come rete secondaria
Primary network → OVN-Kubernetes (o SDN) continua a soddisfare il modello Kubernetes.

Secondary network → Multus chiama Bridge CNI (o OVS CNI, Macvlan, SR-IOV…) e collega una seconda NIC del pod/VM a un bridge Linux o a un bridge OVS dedicato
KubeVirt.io
KubeVirt.io
.

È la modalità indicata dalla documentazione ufficiale per mettere le VM KubeVirt/virt-launcher direttamente su VLAN fisiche
OpenShift Documentation
.
Che alternative “senza OVN” esistono?
OpenShift SDN – unica opzione supportata se vuoi rinunciare a OVN ma restare pienamente supportato 
OpenShift Documentation
OKD Documentation
.

Cilium, Calico e altri – possibili come default solo reinstallando o creando cluster non-OCP; in OpenShift 4.x non sono supportati out-of-the-box come provider primario.

eBPF-solo / Bridge-solo – configurazioni fai-da-te; valide su Kubernetes “vanilla”, ma fuori dal supporto Red Hat.

In OpenShift Virtualization il bridge Linux (o il bridge OVS tramite OVS CNI) è pensato solo per reti aggiuntive via Multus; il cluster ha comunque bisogno di OVN-Kubernetes (o, se proprio, OpenShift SDN) come rete primaria.
Tentare di rimpiazzarla con Bridge CNI mette tutti i pod sulla LAN fisica, rompe le promesse del modello Kubernetes e non è supportato: ecco perché sembrava “una cazzata” – e in effetti, sul piano del supporto Red Hat, lo è.


OVN-Kubernetes incorpora Open vSwitch (OVS) per costruire e governare un’unica rete “di default” (overlay Geneve + NetworkPolicy) per tutti i pod / VM del cluster — lo fa parlando con OVSDB e programmando i flussi OpenFlow senza passare da un plugin CNI esterno
OpenShift Documentation
OpenShift Documentation
OpenShift Documentation
.
### !!! IMPORTANTE !!! ###
L’OVS CNI è invece un plugin CNI minimalista: non possiede un control-plane, non crea tunnel, non fa policy; semplicemente, quando Multus lo invoca, collega l’interfaccia secondaria del pod a #!!!# UN BRIDGE OVS GIA' ESISTENTE #!!!
usando una veth, lasciando a te il compito di preparare quel bridge e di dargli connettività!!!

Quindi una NodeNetworkConfigurationPolicy crea l'OVS switch che non viene gestito da OVN-k8s? Così poi OVS CNI plugin può gestirlo fuori dal controllo di OVN-k8s?

Una NodeNetworkConfigurationPolicy (NNCP) servita dall’operatore Kubernetes NMState ti consente di creare (o modificare) un bridge OVS sul nodo – per esempio br-phys – fuori dal dominio di OVN-Kubernetes, che invece continua a gestire solo i suoi bridge interni (br-int, br-ex) e i relativi tunnel Geneve / OpenFlow.
OpenShift Documentation
OpenShift Documentation

Una volta che il bridge OVS esiste, il plugin OVS CNI (invocato da Multus come rete secondaria) non fa altro che attaccare la porta del pod/VM a quel bridge, senza toccare né i database OVN né i flussi creati da OVN-K8s: in pratica i due mondi restano separati e convivono.
GitHub
GitHub

2. Perché serve la NNCP prima dell’OVS CNI
Il plugin OVS CNI non crea bridge: si aspetta che esista già, altrimenti fallisce.
GitHub

NNCP è dichiarativo: descrivi lo stato desiderato (type: ovs-bridge, porte, VLAN) e l’operatore riconcilia sui nodi.
GitHub
OpenShift Documentation

Isolamento dal control-plane OVN: il bridge NNCP non viene registrato nei DB OVN, quindi OVN-K8s non vi applica policy né tunnel; resta un “provider-network” L2/L3 che amministri tu.
OpenShift Documentation

Esempio concettuale (senza comandi):
NNCP:        crea br-phys ←→ eth0 (fisica)          # livello nodo
OVN-K8s:     gestisce br-int, tun0, flussi          # overlay principale
OVS CNI:     net1 del Pod → br-phys (port: vethXYZ) # rete secondaria

Il pod/VM esce quindi con due NIC:

net0 → overlay OVN (ClusterIP, NetworkPolicy)

net1 → bridge OVS “provider” (LAN fisica, VLAN, QoS openflow personalizzabile)

3. Vantaggi dell’approccio
Separation of concerns – OVN resta snello e continua a offrire SDN di default; il bridge OVS aggiuntivo fornisce accesso diretto a reti fisiche o servizi che richiedono VLAN/QoS dedicate.
OpenShift Documentation

Hardware offload opzionale – il bridge creato via NNCP può essere impostato per l’offload Mellanox con parametri che OVS CNI capisce ma che OVN non gestirebbe.
GitHub

Supporto pieno e documentato – La combinazione “NNCP + OVS CNI come additional network” è l’unico flusso supportato da Red Hat quando vuoi collegare VM OpenShift Virtualization a una rete provider locale (topologia localnet).
OpenShift Documentation
OpenShift Documentation

4. Limiti da ricordare
Responsabilità delle policy – Sul bridge creato da NNCP dovrai gestire firewall, ACL o VLAN tagging a mano (o con OpenFlow personalizzato), perché OVN-K8s non applica le sue NetworkPolicy lì sopra.
OpenShift Documentation

Visibilità e monitoraggio – Strumenti che osservano solo br-int (per esempio l’agent NetObserv) non vedranno il traffico sul nuovo bridge: va incluso esplicitamente.
OpenShift Documentation

Coerenza tra nodi – Ogni nodo che deve ospitare quelle pod/VM deve avere la stessa NNCP applicata e in stato Available, altrimenti la schedulazione fallirà.
OpenShift Documentation

Morale
Sì*, una NodeNetworkConfigurationPolicy può (e deve) creare l’OVS bridge da usare come provider network.

Sì*, OVS CNI poi ci attacca le interfacce dei pod/VM senza che OVN-Kubernetes interferisca: i due livelli operano in spazi separati ma compatibili, permettendoti di unire overlay SDN e connettività diretta su OVS dove serve.


In pratica l’OVS CNI è il “cacciavite” che ti permette di agganciare una seconda o terza interfaccia a un bridge OVS totalmente fuori dal dominio di OVN-K8s, esattamente come Bridge CNI fa con il Linux bridge 
OpenShift Documentation
OpenShift Documentation
. Multus orchestra l’ordine dei plugin: prima il primary (OVN-K8s), poi l’OVS CNI, così la VM/pod esce con due reti distinte 


Dettagli operativi che spiegano la distinzione
Scope di gestione: OVN-K8s crea i suoi bridge (br-int, br-ex) e non tocca quelli che tu definisci per altri scopi; l’OVS CNI lavora solo sui bridge che gli indichi —with nessuna interazione con i database OVN
Express YourSelf !
.

Chi configura il bridge: l’OVS CNI «non configura i bridge, è compito dell’admin crearli e collegarli alla rete»
GitHub
eprints.ost.ch
.

Supporto OpenShift: Red Hat supporta l’OVS CNI esclusivamente come additional network via Multus; la rete primaria deve rimanere OVN-Kubernetes (o, legacy, OpenShift SDN)

Quando non ti serve l’OVS CNI
Se l’unica esigenza è la connettività pod-to-pod/VM e le NetworkPolicy fornite da OVN-K8s.

Se non hai bisogno di portare quelle workload in VLAN esterne oppure su un bridge OVS dedicato.

Quando l’OVS CNI è la scelta giusta
Devi dare alle VM KubeVirt una NIC “provider” su una VLAN fisica senza uscire dall’host con SR-IOV.

Vuoi QoS o mirroring per un gruppo di pod su un bridge OVS-DPDK ad alte prestazioni.

Gestisci un cluster dove il primary CNI è Calico/Cilium ma una parte dei workload richiede OVS per leggi di rete specifiche.

In sintesi
OVN-K8s ≈ “intero sistema SDN” (controller + overlay + policy) che internamente usa OVS solo per la rete primaria.

OVS CNI ≈ “adattatore CNI” che ti consente, quando serve, di collegare altre interfacce dei pod/VM a qualsiasi bridge OVS che hai preparato.

I due non sono in conflitto: l’OVS CNI completa OVN-K8s quando hai bisogno di connessioni OVS fuori dal suo overlay, o lo sostituisce in cluster dove OVN non è presente.







Nel contesto KVM, Linux bridge e Open vSwitch (OVS) offrono due livelli di complessità e funzionalità:

Linux bridge

Cos’è: bridge di rete incluso nel kernel, usato di default da libvirt.

Pro: configurazione semplice (con virsh, virt-manager o nmcli), integrazione out-of-the-box, ideale per reti base (NAT o bridge verso LAN), basso overhead.

Contro: niente tunneling (VXLAN/GRE), assenza di OpenFlow, QoS e ACL avanzate; limitato a scenari monotenant.

Open vSwitch

Cos’è: switch virtuale SDN-ready con supporto a OpenFlow e tecnologie overlay.

Pro: VXLAN/GRE/Geneve, mirroring, QoS, ACL, integrazione con controller (OVN, OpenDaylight), perfetto per infrastrutture cloud e multi-tenant.

Contro: più complesso da installare e gestire (ovs-vsctl, XML libvirt manuale), richiede pacchetti aggiuntivi e configurazioni extra.

Quando scegliere

Reti semplici (VM che devono uscire su Internet o in LAN): Linux bridge è più rapido da mettere in piedi e sufficientemente stabile.

Reti avanzate (isolamento, segmentazione, overlay, SDN): OVS garantisce granularità e scalabilità maggiori.

Mix & Match
Nulla vieta di usare entrambi sullo stesso host: lasci Linux bridge per il traffico “standard” e OVS dove servono tunneling o policy avanzate. In questo modo puoi ottimizzare semplicità e potenza di rete in base alle esigenze delle tue VM.



### Che relazione c'è tra OVN Kubernetes, OVS e Multus, sono un po confuso?

1. Open vSwitch (OVS)
Cos’è: un switch virtuale “L2/L3” implementato in kernel (con componenti userspace).

Ruolo: fornisce il datapath (tabelle MAC, OpenFlow, tunneling) su cui si appoggiano soluzioni SDN/overlay.

2. OVN-Kubernetes
Cos’è: un CNI plugin per Kubernetes basato su OVN (Open Virtual Network), il control-plane SDN di Open vSwitch.

Ruolo:

Northbound: prende le policy di rete (“Service”, “NetworkPolicy”, “LogicalSwitch” ecc.) da Kubernetes API.

Southbound: traduce in flussi OpenFlow e config OVNDB che poi OVS applica alle interfacce dei pod.

Come usa OVS:

Installa un daemon ovn-controller su ogni nodo che parla con l’OVN Southbound DB.

Configura i bridge OVS (br-int, br-ex) e i tunnel (Geneve/UDP) per realizzare la rete overlay tra nodi.

3. Multus CNI
Cos’è: un “meta-plugin” CNI per Kubernetes.

Ruolo: ti permette di montare più interfacce di rete in uno stesso pod, delegando la creazione a più plugin (es. OVN-Kubernetes, macvlan, sriov, altro).

Relazione con OVN-K8s e OVS:

Senza Multus: puoi usare solo un CNI per pod (es. il plugin OVN-Kubernetes).

Con Multus:

Primary CNI può essere OVN-Kubernetes (gestisce la rete “main”).

Secondary CNI possono essere altri (macvlan, ipvlan, Calico, o persino un altro OVN network).

Tutte le interfacce aggiuntive finiscono comunque su bridge/port di OVS o sulle reti definite dal plugin secondario.

In sintesi
OVS è lo switch di basso livello.

OVN-Kubernetes è il control-plane/container-networking che sfrutta OVS per costruire overlay e policy.

Multus è il “gestore” che ti permette di affiancare a OVN-Kubernetes (o a qualsiasi altro CNI) ulteriori reti dentro lo stesso pod.

Così, se hai bisogno di una sola rete Kubernetes isolata, basta OVN-K8s+OVS. Se invece servono più interfacce (per storage, management, servizi separati…), aggiungi Multus e scegli i plugin più adatti.




+--------------------------------------------------------------------------------------------------------------+
| Node                                                                                                         |
|                                                                                                              |
|   +------------------------------------------------------------------------------------------------------+   |
|   | virt-launcher pod                                                                                    |   |
|   |                                                                                                      |   |
|   |    +--------------------------------------------------------------------------------------------+    |   |
|   |    | VM                                                                                         |    |   |
|   |    |                                                                                            |    |   |
|   |    |   eth0 ─┐                                                                       ┌─ eth1    |    |   |
|   |    +---------+-----------------------------------------------------------------------+----------+    |   |
|   |              │                                                                       │               |   |
|   |            eth0 (pod iface)                                                      net1 (pod iface)    |   |
|   +--------------|-----------------------------------------------------------------------|---------------+   |
|                  |                                                                       |                   |
|                  |                          NetworkAttachmentDefinition (defines) ─────▶|                   |
|                  |                                                                       |                   |
|                  |                                                                       |                   |
|                  |                                                                       |                   |
|                  |    +------------------------+-------------------------+               |                   |
|                  |    |  Pod net   |  Service net  |                     |               |                   |
|                  |    +----------------------------+                     |               |                   |
|                  |                 SDN                                   |               |                   |
|                  |    ---------------------------------------------------|---------------|---------------+   |
|                  |                              Multus                   ▼                               |   |
|                  |    ----------------------------------------------------|------------------------------|   |
|                  |                     ▲               ▲                  |                              |   |
|                  |                     │               │                  |                              |   |
|                  |         reports status (NNCE)       │                  │   defines (NNCP)             |   |
|                  |                     │               │                  │                              |   |
|   +--------------|---------------------|---------------|------------------|------------------------------|   |
|   |              |                     |               |                  |                              |   |
|   |  +-----------v------------+   +----v-------------+ |  +--------------v-------------+                 |   |
|   |  |  OVS bridge br-ex      |   | bond0            | |  |  Linux bridge br0           |                |   |
|   |  |                        |   |                  | |  |                             |                |   |
|   |  |  nic  |  nic           |   +------------------+ |  |  bond1                      |                |   |
|   |  +-------|---------------+                        |  |                              |                |   |
|   |          |                                        |  |  nic  |  nic                 |                |   |
|   |          +----------------------------------------+  +------------------------------+                |   |
|   |                                                                                                      |   |
+---|------------------------------------------------------------------------------------------------------|---+
    |                                                                                                      |
    |  Default network                                                                                     |
    |                                                                                                      |
    |                                                                                   Other network      |
    +------------------------------------------------------------------------------------------------------+



